#ifndef FIXED_HPP
# define FIXED_HPP
# include <iostream>
class Fixed
{
public:
    Fixed();
    Fixed(const Fixed &f);
    Fixed(const int intValue);
    Fixed(const float floatValue);
    ~Fixed();
    Fixed& operator=(const Fixed&);

    int getRawBits() const;
    void setRawBits(int const raw);
    
    float toFloat() const;
    int toInt() const;

    
    bool operator>(const Fixed &f) const;
    bool operator<(const Fixed &f) const;
    bool operator>=(const Fixed &f) const;
    bool operator<=(const Fixed &f) const;
    bool operator==(const Fixed &f) const;
    bool operator!=(const Fixed &f) const;

    Fixed operator+(const Fixed &f) const;
    Fixed operator-(const Fixed &f) const;
    Fixed operator*(const Fixed &f) const;
    Fixed operator/(const Fixed &f) const;

    Fixed &operator++();
    Fixed operator++(int);
    Fixed &operator--();
    Fixed operator--(int);

    static Fixed &min(Fixed &f1, Fixed &f2);
    static Fixed &max(Fixed &f1, Fixed &f2);
    static const Fixed &min(Fixed const &f1, Fixed const &f2);
    static const Fixed &max(Fixed const &f1, Fixed const &f2);
private:
    int value;
    static const int bitNum = 8;
};

std::ostream& operator<<(std::ostream &out, Fixed const &f);
#endif
